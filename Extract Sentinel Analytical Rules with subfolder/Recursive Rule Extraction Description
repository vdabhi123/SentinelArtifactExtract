The default script checks only the top-level YAML files in Analytic Rules. 
But many solutions‚Äîlike Microsoft Defender XDR‚Äîhave nested subfolders like:
Solutions/Microsoft Defender XDR/Analytic Rules/Campaign/Jupyter-Solarmaker/Rule.yaml, etc.

We can recursively walk through all subfolders under Analytic Rules to fetch all .yaml files, no matter how deep they are.
________________________________________
üîÅ Updated Script (Recursive Rule Extraction Included)
Here's a fully updated script that:
‚Ä¢	Authenticates with GitHub using your token
‚Ä¢	Prompts you to select a valid solution with an Analytic Rules folder
‚Ä¢	Recursively scans subfolders for YAML rule files
‚Ä¢	Extracts all available rule metadata
‚Ä¢	Exports the results to CSV
# Install YAML module if not present
if (-not (Get-Module -ListAvailable -Name powershell-yaml)) {
    Install-Module -Name powershell-yaml -Scope CurrentUser -Force
}
Import-Module powershell-yaml

# GitHub token (hardcoded)
$githubToken = "your_github_pat_here"
$headers = @{ Authorization = "Bearer $githubToken" }

# GitHub base URL
$solutionsBaseUrl = "https://api.github.com/repos/Azure/Azure-Sentinel/contents/Solutions"

# Get valid solutions with Analytic Rules folder
$validSolutions = @()

try {
    $solutions = Invoke-RestMethod -Uri $solutionsBaseUrl -Headers $headers
} catch {
    Write-Host "‚ùå Failed to fetch solution list. Error: $($_.Exception.Message)"
    exit
}

foreach ($solution in $solutions | Where-Object { $_.type -eq "dir" }) {
    $solutionName = $solution.name
    $encodedName = [uri]::EscapeDataString($solutionName)
    $analyticUrl = "$solutionsBaseUrl/$encodedName/Analytic%20Rules"

    try {
        $check = Invoke-RestMethod -Uri $analyticUrl -Headers $headers -ErrorAction Stop
        $validSolutions += $solutionName
    } catch {
        # No Analytic Rules folder - skip
    }
}

# Prompt user to choose a solution
Write-Host "`nüì¶ Available solutions with Analytic Rules:`n"
$validSolutions | Sort-Object | ForEach-Object { Write-Host " - $_" }
$solutionInput = Read-Host "`nEnter the solution name exactly as shown above"

if (-not ($validSolutions -contains $solutionInput)) {
    Write-Host "`n‚ùå Invalid solution name entered. Please run the script again and choose from the list."
    exit
}

# Recursive rule fetcher
function Get-AllYamlFilesRecursive($url) {
    $items = @()
    try {
        $files = Invoke-RestMethod -Uri $url -Headers $headers -ErrorAction Stop
        foreach ($item in $files) {
            if ($item.type -eq 'file' -and $item.name -like '*.yaml') {
                $items += $item
            } elseif ($item.type -eq 'dir') {
                $items += Get-AllYamlFilesRecursive -url $item.url
            }
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to list content from $url"
    }
    return $items
}

# Build the rule list
$encodedInput = [uri]::EscapeDataString($solutionInput)
$analyticRulesApiUrl = "$solutionsBaseUrl/$encodedInput/Analytic%20Rules"

$yamlFiles = Get-AllYamlFilesRecursive -url $analyticRulesApiUrl
$allRules = @()

foreach ($file in $yamlFiles) {
    try {
        $yamlContent = Invoke-RestMethod -Uri $file.download_url -Headers $headers
        $parsedYaml = ConvertFrom-Yaml $yamlContent

        $allRules += [PSCustomObject]@{
            Solution         = $solutionInput
            RuleName         = $parsedYaml["name"]
            Description      = $parsedYaml["description"]
            Severity         = $parsedYaml["severity"]
            MITRE_Tactics    = ($parsedYaml["tactics"] -join ", ")
            MITRE_Techniques = ($parsedYaml["relevantTechniques"] -join ", ")
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to parse $($file.download_url): $($_.Exception.Message)"
    }
}

# Export to CSV
$csvPath = "./Sentinel_Analytics_Rules_$($solutionInput -replace '\s','_').csv"
$allRules | Export-Csv -Path $csvPath -NoTypeInformation -Encoding utf8

Write-Host "`n‚úÖ Exported $($allRules.Count) rules to $csvPath"
________________________________________
üß™ Example Test Case
Try running this for Microsoft Defender XDR, and it will pull rules from:
Solutions/Microsoft Defender XDR/Analytic Rules/
Solutions/Microsoft Defender XDR/Analytic Rules/Campaign/
Solutions/Microsoft Defender XDR/Analytic Rules/Campaign/Jupyter-Solarmaker/
