# Install YAML module if not present
if (-not (Get-Module -ListAvailable -Name powershell-yaml)) {
    Install-Module -Name powershell-yaml -Scope CurrentUser -Force
}
Import-Module powershell-yaml

# GitHub Personal Access Token (hardcoded here for simplicity)
$githubToken = "your_github_pat_here"
$headers = @{ Authorization = "Bearer $githubToken" }

# GitHub base URL for Sentinel Solutions
$solutionsBaseUrl = "https://api.github.com/repos/Azure/Azure-Sentinel/contents/Solutions"

# List to hold solutions with "Analytic Rules" folder
$validSolutions = @()

# Fetch all solutions
try {
    $solutions = Invoke-RestMethod -Uri $solutionsBaseUrl -Headers $headers
} catch {
    Write-Host "‚ùå Failed to fetch solution list. Error: $($_.Exception.Message)"
    exit
}

# Filter only those with "Analytic Rules" sub-folder
foreach ($solution in $solutions | Where-Object { $_.type -eq "dir" }) {
    $solutionName = $solution.name
    $encodedSolution = [uri]::EscapeDataString($solutionName)
    $analyticRulesUrl = "$solutionsBaseUrl/$encodedSolution/Analytic%20Rules"

    try {
        $check = Invoke-RestMethod -Uri $analyticRulesUrl -Headers $headers -Method Get -ErrorAction Stop
        $validSolutions += $solutionName
    } catch {
        # Ignore if 404 (no Analytic Rules)
    }
}

# Prompt user for input
Write-Host "`nüì¶ Available Sentinel solutions with Analytic Rules:`n"
$validSolutions | Sort-Object | ForEach-Object { Write-Host " - $_" }
$solutionInput = Read-Host "`nEnter the solution name exactly as shown above"

if (-not ($validSolutions -contains $solutionInput)) {
    Write-Host "`n‚ùå Invalid solution name entered. Please run the script again and choose from the list."
    exit
}

# Process selected solution
$encodedSolution = [uri]::EscapeDataString($solutionInput)
$rulesApiUrl = "$solutionsBaseUrl/$encodedSolution/Analytic%20Rules"

try {
    $ruleFiles = Invoke-RestMethod -Uri $rulesApiUrl -Headers $headers
} catch {
    Write-Host "‚ö†Ô∏è Failed to fetch rules from $rulesApiUrl. Error: $($_.Exception.Message)"
    exit
}

# Temp array to store rules
$allRules = @()

foreach ($file in $ruleFiles | Where-Object { $_.name -like '*.yaml' }) {
    try {
        $yamlContent = Invoke-RestMethod -Uri $file.download_url -Headers $headers
        $parsedYaml = ConvertFrom-Yaml $yamlContent

        $allRules += [PSCustomObject]@{
            Solution         = $solutionInput
            RuleName         = $parsedYaml["name"]
            Description      = $parsedYaml["description"]
            Severity         = $parsedYaml["severity"]
            MITRE_Tactics    = ($parsedYaml["tactics"] -join ", ")
            MITRE_Techniques = ($parsedYaml["relevantTechniques"] -join ", ")
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to parse $($file.download_url): $($_.Exception.Message)"
    }
}

# Export to CSV
$csvPath = "./Sentinel_Analytics_Rules_$($solutionInput -replace '\s','_').csv"
$allRules | Export-Csv -Path $csvPath -NoTypeInformation -Encoding utf8

Write-Host "`n‚úÖ Exported $($allRules.Count) rules to $csvPath"
